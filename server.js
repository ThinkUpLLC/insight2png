// Generated by CoffeeScript 1.7.1
var Insight2png, TESTER_REGEX, TU_REGEX, close, domain, fourOhFour, fs, handleImageResponse, hashCode, logTime, port, server, system, writeImageToClient;

system = require("system");

server = require("webserver").create();

Insight2png = require('./insight2png');

fs = require('fs');

TU_REGEX = /^tu=.+&u=.+&n=.+&d=.+&s=.+&share=1$/;

TESTER_REGEX = /^headline=.+&body=.+&preview=1$/;

if (system.args.length < 2 || system.args.length > 3) {
  domain = "0.0.0.0";
  port = 8080;
} else {
  domain = system.args[1];
  port = system.args[2];
}

console.log("Server is running on " + domain + ":" + port + "\n");

server.listen("" + domain + ":" + port, function(request, response) {
  var filename, insight2png, params, tuUser, url;
  if (request.url === '/favicon.ico') {
    return;
  }
  response.start = new Date();
  response.log = '';
  if (request.url.match(/^\/insight/)) {
    params = request.url.split("?")[1];
    if (!((params != null) && ((params.match(TU_REGEX) != null) || (params.match(TESTER_REGEX) != null)))) {
      return fourOhFour(response, "Not a valid request");
    }
    if (params.match(TU_REGEX)) {
      tuUser = params.substr(3).split('&')[0];
      if (tuUser === 'shares' || tuUser === '') {
        return fourOhFour(response, "\"" + tuUser + "\" is not a valid user");
      }
      url = "https://" + tuUser + ".thinkup.com/?" + (params.split("tu=" + tuUser + "&")[1]);
    } else if (params.match(TESTER_REGEX)) {
      url = "https://thinkup.thinkup.com/insight_tester.php?" + params;
    }
    response.log += url + "\n";
    filename = "" + (hashCode(url)) + ".png";
    insight2png = new Insight2png(url, filename, response, handleImageResponse);
    if (fs.exists("screenshots/" + filename)) {
      response.log += "Screenshot exists; returning image " + filename;
      return insight2png.readFile();
    } else {
      response.log += "First request; generating " + filename + "\n";
      return insight2png.run();
    }
  } else {
    return fourOhFour(response);
  }
});

handleImageResponse = {
  success: function(imgData, response) {
    return writeImageToClient(response, imgData);
  },
  error: function(error, response) {
    var msg;
    msg = error;
    return fourOhFour(response, msg);
  }
};

writeImageToClient = function(response, imgData) {
  response.writeHead(200, {
    'Content-Type': 'image/png'
  });
  response.setEncoding('binary');
  response.write(atob(imgData));
  return close(response);
};

fourOhFour = function(response, msg) {
  if (msg == null) {
    msg = "No url requested";
  }
  response.log += "404:\n";
  response.log += "" + msg;
  response.statusCode = 404;
  response.write("<!DOCTYPE html>\n<html><head><meta charset=\"utf-8\"><title>404</title></head><body>404: " + msg + "</body></html>");
  return close(response);
};

close = function(response) {
  console.log(response.log);
  logTime(response.start);
  return response.close();
};

logTime = function(start) {
  return console.log("" + ((new Date() - start) / 1000) + " seconds\n");
};

hashCode = function(s) {
  return s.split("").reduce(function(a, b) {
    a = ((a << 5) - a) + b.charCodeAt(0);
    return a & a;
  }, 0);
};
